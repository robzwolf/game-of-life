
Black Lives Matter. Support the Equal Justice Initiative.
React
Docs Tutorial Blog Community
v 16.13.1 Languages GitHub
Introducing JSX

Consider this variable declaration:

 const element = < h1 > Hello, world! </ h1 > ;  

This funny tag syntax is neither a string nor HTML.

It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.

JSX produces React “elements”. We will explore rendering them to the DOM in the next section . Below, you can find the basics of JSX necessary to get you started.
Why JSX?

React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.

Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both. We will come back to components in a further section , but if you’re not yet comfortable putting markup in JS, this talk might convince you otherwise.

React doesn’t require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.

With that out of the way, let’s get started!
Embedding Expressions in JSX

In the example below, we declare a variable called name and then use it inside JSX by wrapping it in curly braces:

 const name = 'Josh Perez' ; const element = < h1 > Hello, { name } </ h1 > ; ReactDOM . render ( element , document . getElementById ( 'root' ) ) ;  

You can put any valid JavaScript expression inside the curly braces in JSX. For example, 2 + 2 , user.firstName , or formatName(user) are all valid JavaScript expressions.

In the example below, we embed the result of calling a JavaScript function, formatName(user) , into an <h1> element.

 function formatName ( user ) { return user . firstName + ' ' + user . lastName ; } const user = { firstName : 'Harper' , lastName : 'Perez' } ; const element = ( < h1 > Hello, { formatName ( user ) } ! </ h1 > ) ; ReactDOM . render ( element , document . getElementById ( 'root' ) ) ;  

Try it on CodePen

We split JSX over multiple lines for readability. While it isn’t required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of automatic semicolon insertion .
JSX is an Expression Too

After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.

This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions:

 function getGreeting ( user ) { if ( user ) { return < h1 > Hello, { formatName ( user ) } ! </ h1 > ; } return < h1 > Hello, Stranger. </ h1 > ; }  

Specifying Attributes with JSX

You may use quotes to specify string literals as attributes:

 const element = < div tabIndex = " 0 " > </ div > ;  

You may also use curly braces to embed a JavaScript expression in an attribute:

 const element = < img src = { user . avatarUrl } > </ img > ;  

Don’t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.

    Warning:

    Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.

    For example, class becomes className in JSX, and tabindex becomes tabIndex .

Specifying Children with JSX

If a tag is empty, you may close it immediately with /> , like XML:

 const element = < img src = { user . avatarUrl } /> ;  

JSX tags may contain children:

 const element = ( < div > < h1 > Hello! </ h1 > < h2 > Good to see you here. </ h2 > </ div > ) ;  

JSX Prevents Injection Attacks

It is safe to embed user input in JSX:

 const title = response . potentiallyMaliciousInput ; // This is safe: const element = < h1 > { title } </ h1 > ;  

By default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.
JSX Represents Objects

Babel compiles JSX down to React.createElement() calls.

These two examples are identical:

 const element = ( < h1 className = " greeting " > Hello, world! </ h1 > ) ;  

 const element = React . createElement ( 'h1' , { className : 'greeting' } , 'Hello, world!' ) ;  

React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:

 // Note: this structure is simplified const element = { type : 'h1' , props : { className : 'greeting' , children : 'Hello, world!' } } ;  

These objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.

We will explore rendering React elements to the DOM in the next section .

    Tip:

    We recommend using the “Babel” language definition for your editor of choice so that both ES6 and JSX code is properly highlighted.

Is this page useful? Edit this page
Installation

    Getting Started
    Add React to a Website
    Create a New React App
    CDN Links
    Release Channels

Main Concepts

    1. Hello World
    2. Introducing JSX
    3. Rendering Elements
    4. Components and Props
    5. State and Lifecycle
    6. Handling Events
    7. Conditional Rendering
    8. Lists and Keys
    9. Forms
    10. Lifting State Up
    11. Composition vs Inheritance
    12. Thinking In React

Advanced Guides

    Accessibility
    Code-Splitting
    Context
    Error Boundaries
    Forwarding Refs
    Fragments
    Higher-Order Components
    Integrating with Other Libraries
    JSX In Depth
    Optimizing Performance
    Portals
    Profiler
    React Without ES6
    React Without JSX
    Reconciliation
    Refs and the DOM
    Render Props
    Static Type Checking
    Strict Mode
    Typechecking With PropTypes
    Uncontrolled Components
    Web Components

API Reference

    React
        React.Component
    ReactDOM
    ReactDOMServer
    DOM Elements
    SyntheticEvent
    Test Utilities
    Test Renderer
    JS Environment Requirements
    Glossary

Hooks

    1. Introducing Hooks
    2. Hooks at a Glance
    3. Using the State Hook
    4. Using the Effect Hook
    5. Rules of Hooks
    6. Building Your Own Hooks
    7. Hooks API Reference
    8. Hooks FAQ

Testing

    Testing Overview
    Testing Recipes
    Testing Environments

Concurrent Mode (Experimental)

    1. Introducing Concurrent Mode
    2. Suspense for Data Fetching
    3. Concurrent UI Patterns
    4. Adopting Concurrent Mode
    5. Concurrent Mode API Reference

Contributing

    How to Contribute
    Codebase Overview
    Implementation Notes
    Design Principles

FAQ

    AJAX and APIs
    Babel, JSX, and Build Steps
    Passing Functions to Components
    Component State
    Styling and CSS
    File Structure
    Versioning Policy
    Virtual DOM and Internals

    Previous article
    Hello World
    Next article
    Rendering Elements

Docs
Installation Main Concepts Advanced Guides API Reference Hooks Testing Concurrent Mode (Experimental) Contributing FAQ
Channels
GitHub Stack Overflow Discussion Forums Reactiflux Chat DEV Community Facebook Twitter
Community
Code of Conduct Community Resources
More
Tutorial Blog Acknowledgements React Native Privacy Terms
Facebook Open Source

Copyright © 2020 Facebook Inc.
